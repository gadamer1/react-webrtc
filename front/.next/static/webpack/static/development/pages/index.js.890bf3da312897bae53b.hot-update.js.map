{"version":3,"file":"static/webpack/static/development/pages/index.js.890bf3da312897bae53b.hot-update.js","sources":["webpack:///./components/video/Video.js"],"sourcesContent":["import React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.textref = createRef();\n  }\n\n  componentDidMount() {\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\n    if (navigator.mediaDevices === undefined) {\n      navigator.mediaDevices = {};\n    }\n\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    if (navigator.mediaDevices.getUserMedia === undefined) {\n      navigator.mediaDevices.getUserMedia = function(constraints) {\n        // First get ahold of the legacy getUserMedia, if present\n        var getUserMedia =\n          navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n        // Some browsers just don't implement it - return a rejected promise with an error\n        // to keep a consistent interface\n        if (!getUserMedia) {\n          return Promise.reject(\n            new Error(\"getUserMedia is not implemented in this browser\")\n          );\n        }\n\n        // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n        return new Promise(function(resolve, reject) {\n          getUserMedia.call(navigator, constraints, resolve, reject);\n        });\n      };\n    }\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      this.textref.value = JSON.stringify(sdp);\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n    this.pc.ontrack = e => {\n      console.log(\"ontrack\", e.streams[0]);\n      this.remoteVideo.current.srcObject = e.streams[0];\n      this.localVideo.current.srcObject = null;\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        console.log(\"my stream\", mediaStream);\n        mediaStream.getTracks().reduce(track => {\n          this.pc.addTrack(track, mediaStream);\n          console.log(track);\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onOfferButton = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  _onAnswerButton = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{ width: 100, height: 100, backgroundColor: \"black\" }}\n          ref={this.localVideo}\n          autoPlay\n          playsInline\n        />\n        <video\n          style={{\n            width: 100,\n            height: 100,\n            marginLeft: 10,\n            backgroundColor: \"black\"\n          }}\n          ref={this.remoteVideo}\n          autoPlay\n          playsInline\n        />\n        <button onClick={this._onOfferButton}>offer button</button>\n        <button onClick={this._onAnswerButton}>answer button</button>\n        <textarea\n          style={{ width: 450, height: 40 }}\n          ref={ref => {\n            this.textref = ref;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA8FA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;AA4GA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAtHA;AAuHA;AACA;AACA;AAFA;AAIA;AACA;AAzHA;AACA;AACA;AACA;AANA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAkCA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA5JA;AACA;AA8JA;;;;A","sourceRoot":""}