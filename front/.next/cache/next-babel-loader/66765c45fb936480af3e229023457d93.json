{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onCallButton\", () => {\n      console.log(\"Offer\"); // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n      // initiates the creation of SDP\n\n      this.pc.createOffer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n        console.log(\"Answer\");\n        this.pc.createAnswer({\n          offerToReceiveVideo: 1\n        }).then(sdp => {\n          // console.log(JSON.stringify(sdp))\n          // set answer sdp as local description\n          this.pc.setLocalDescription(sdp);\n          this.sendToPeer(\"offerOrAnswer\", sdp);\n        });\n      });\n    });\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n\n    this.pc.ontrack = e => {\n      this.remoteVideo.current.srcObject = e.streams[0];\n    };\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      this.localVideo.current.srcObject = mediaStream;\n      mediaStream.getTracks().reduce(track => {\n        this.pc.addTrack(track);\n      });\n    }).catch(err => console.error(err));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onCallButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"call button\"));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","io","Video","constructor","props","console","log","pc","createOffer","offerToReceiveVideo","then","sdp","setLocalDescription","sendToPeer","createAnswer","state","localVideo","remoteVideo","componentDidMount","socket","path","on","success","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","emit","socketID","id","payload","onconnectionstatechange","ontrack","current","srcObject","streams","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","getTracks","reduce","track","addTrack","catch","err","error","render","_onCallButton"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n    this.pc.ontrack = e => {\n      this.remoteVideo.current.srcObject = e.streams[0];\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        mediaStream.getTracks().reduce(track => {\n          this.pc.addTrack(track);\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onCallButton = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n\n      console.log(\"Answer\");\n      this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp);\n\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video ref={this.localVideo} autoPlay playsInline />\n        <video ref={this.remoteVideo} autoPlay playsInline />\n        <button onClick={this._onCallButton}>call button</button>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}