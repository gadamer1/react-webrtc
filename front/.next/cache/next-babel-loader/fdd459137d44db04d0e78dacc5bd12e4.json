{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"mediaStreamConstraints\", {\n      video: true,\n      audio: true\n    });\n\n    _defineProperty(this, \"gotLocalMediaStream\", mediaStream => {\n      this.localStream = mediaStream;\n      this.localVideo.current.srcObject = mediaStream;\n    });\n\n    _defineProperty(this, \"onClickButton\", () => {\n      navigator.mediaDevices.getUserMedia(this.mediaStreamConstraints).then(this.gotLocalMediaStream).catch(this.handleLocalMediaStreamError);\n    });\n\n    _defineProperty(this, \"onClickStop\", () => {\n      this.localStream.getVideoTracks()[0].stop();\n    });\n\n    _defineProperty(this, \"onClickCall\", () => {\n      let localPeerConnection = new RTCPeerConnection(servers);\n      localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n      localPeerConnection.addEventListener(\"iceconnectionstatechange\", handleConnectionChange);\n    });\n\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.localStream = createRef();\n  }\n\n  handleLocalMediaStreamError(error) {\n    console.log(\"navigator.getUserMedia error: \", error);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Realtime communication with WebRTC\"), __jsx(\"video\", {\n      id: \"local-video\",\n      autoPlay: true,\n      playsInline: true,\n      ref: this.localVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      id: \"remote-video\",\n      autoPlay: true,\n      playsInline: true,\n      ref: this.remoteVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: this.onClickButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"\\uB0B4 \\uCE74\\uBA54\\uB77C \\uD0A4\\uAE30\"), __jsx(\"button\", {\n      onClick: this.onClickStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"\\uC885\\uB8CC\"), __jsx(\"button\", {\n      onClick: this.onClickCall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"\\uBD88\\uB7EC\\uC624\\uAE30\")));\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js"],"names":["React","createRef","Component","index","constructor","props","video","audio","mediaStream","localStream","localVideo","current","srcObject","navigator","mediaDevices","getUserMedia","mediaStreamConstraints","then","gotLocalMediaStream","catch","handleLocalMediaStreamError","getVideoTracks","stop","localPeerConnection","RTCPeerConnection","servers","addEventListener","handleConnection","handleConnectionChange","remoteVideo","error","console","log","render","onClickButton","onClickStop","onClickCall"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAO,cAAP;;AACA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAC5BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,oDAOM;AACvBC,MAAAA,KAAK,EAAE,IADgB;AAEvBC,MAAAA,KAAK,EAAE;AAFgB,KAPN;;AAAA,iDAYGC,WAAW,IAAI;AACnC,WAAKC,WAAL,GAAmBD,WAAnB;AACA,WAAKE,UAAL,CAAgBC,OAAhB,CAAwBC,SAAxB,GAAoCJ,WAApC;AACD,KAfkB;;AAAA,2CAqBH,MAAM;AACpBK,MAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB,KAAKC,sBADrB,EAEGC,IAFH,CAEQ,KAAKC,mBAFb,EAGGC,KAHH,CAGS,KAAKC,2BAHd;AAID,KA1BkB;;AAAA,yCA4BL,MAAM;AAClB,WAAKX,WAAL,CAAiBY,cAAjB,GAAkC,CAAlC,EAAqCC,IAArC;AACD,KA9BkB;;AAAA,yCAgCL,MAAM;AAClB,UAAIC,mBAAmB,GAAG,IAAIC,iBAAJ,CAAsBC,OAAtB,CAA1B;AACAF,MAAAA,mBAAmB,CAACG,gBAApB,CAAqC,cAArC,EAAqDC,gBAArD;AACAJ,MAAAA,mBAAmB,CAACG,gBAApB,CACE,0BADF,EAEEE,sBAFF;AAID,KAvCkB;;AAEjB,SAAKlB,UAAL,GAAkBT,SAAS,EAA3B;AACA,SAAK4B,WAAL,GAAmB5B,SAAS,EAA5B;AACA,SAAKQ,WAAL,GAAmBR,SAAS,EAA5B;AACD;;AAYDmB,EAAAA,2BAA2B,CAACU,KAAD,EAAQ;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAA9C;AACD;;AAsBDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE;AAAO,MAAA,EAAE,EAAC,aAAV;AAAwB,MAAA,QAAQ,MAAhC;AAAiC,MAAA,WAAW,MAA5C;AAA6C,MAAA,GAAG,EAAE,KAAKvB,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,EAAE,EAAC,cAAV;AAAyB,MAAA,QAAQ,MAAjC;AAAkC,MAAA,WAAW,MAA7C;AAA8C,MAAA,GAAG,EAAE,KAAKmB,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKK,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,KAAKC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAHF,CAJF,CADF;AAYD;;AAvD2B;;AA0D9B,eAAejC,KAAf","sourcesContent":["import React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\nclass index extends Component {\n  constructor(props) {\n    super(props);\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.localStream = createRef();\n  }\n\n  mediaStreamConstraints = {\n    video: true,\n    audio: true\n  };\n\n  gotLocalMediaStream = mediaStream => {\n    this.localStream = mediaStream;\n    this.localVideo.current.srcObject = mediaStream;\n  };\n\n  handleLocalMediaStreamError(error) {\n    console.log(\"navigator.getUserMedia error: \", error);\n  }\n\n  onClickButton = () => {\n    navigator.mediaDevices\n      .getUserMedia(this.mediaStreamConstraints)\n      .then(this.gotLocalMediaStream)\n      .catch(this.handleLocalMediaStreamError);\n  };\n\n  onClickStop = () => {\n    this.localStream.getVideoTracks()[0].stop();\n  };\n\n  onClickCall = () => {\n    let localPeerConnection = new RTCPeerConnection(servers);\n    localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n    localPeerConnection.addEventListener(\n      \"iceconnectionstatechange\",\n      handleConnectionChange\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Realtime communication with WebRTC</h1>\n        <video id=\"local-video\" autoPlay playsInline ref={this.localVideo} />\n        <video id=\"remote-video\" autoPlay playsInline ref={this.remoteVideo} />\n        <div className=\"button\">\n          <button onClick={this.onClickButton}>내 카메라 키기</button>\n          <button onClick={this.onClickStop}>종료</button>\n          <button onClick={this.onClickCall}>불러오기</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}