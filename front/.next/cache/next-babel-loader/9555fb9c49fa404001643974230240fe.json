{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onOfferButton\", () => {\n      console.log(\"Offer\"); // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n      // initiates the creation of SDP\n\n      this.pc.createOffer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"_onAnswerButton\", () => {\n      console.log(\"Answer\");\n      this.pc.createAnswer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"sendToPeer\", (messageType, payload) => {\n      this.socket.emit(messageType, {\n        socketID: this.socket.id,\n        payload\n      });\n    });\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n\n    this.pc.ontrack = e => {\n      this.remoteVideo.current.srcObject = e.streams[0];\n    };\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      this.localVideo.current.srcObject = mediaStream;\n      mediaStream.getTracks().reduce(track => {\n        this.pc.addTrack(track);\n      });\n    }).catch(err => console.error(err));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        backgroundColor: \"black\"\n      },\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        marginLeft: 10,\n        backgroundColor: \"black\"\n      },\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onOfferButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"offer button\"), __jsx(\"button\", {\n      onClick: this._onAnswerButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"answer button\"));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","PureComponent","io","Video","constructor","props","console","log","pc","createOffer","offerToReceiveVideo","then","sdp","setLocalDescription","sendToPeer","createAnswer","messageType","payload","socket","emit","socketID","id","state","localVideo","remoteVideo","componentDidMount","path","on","success","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","onconnectionstatechange","ontrack","current","srcObject","streams","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","getTracks","reduce","track","addTrack","catch","err","error","render","width","height","backgroundColor","marginLeft","_onOfferButton","_onAnswerButton"],"mappings":"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","sourcesContent":["import React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n    this.pc.ontrack = e => {\n      this.remoteVideo.current.srcObject = e.streams[0];\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        mediaStream.getTracks().reduce(track => {\n          this.pc.addTrack(track);\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onOfferButton = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  _onAnswerButton = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{ width: 100, height: 100, backgroundColor: \"black\" }}\n          ref={this.localVideo}\n          autoPlay\n          playsInline\n        />\n        <video\n          style={{\n            width: 100,\n            height: 100,\n            marginLeft: 10,\n            backgroundColor: \"black\"\n          }}\n          ref={this.remoteVideo}\n          autoPlay\n          playsInline\n        />\n        <button onClick={this._onOfferButton}>offer button</button>\n        <button onClick={this._onAnswerButton}>answer button</button>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}