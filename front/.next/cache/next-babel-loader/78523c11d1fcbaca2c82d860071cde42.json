{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\nimport adapter from \"webrtc-adapter\";\n\nvar index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(index, _Component);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"mediaStreamConstraints\", {\n      video: true,\n      audio: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"gotLocalMediaStream\", function (mediaStream) {\n      _this.localStream = mediaStream;\n      _this.localVideo.current.srcObject = mediaStream;\n      trace(\"Received local stream.\");\n\n      _this.setState({\n        callButtonDisabled: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickButton\", function () {\n      navigator.mediaDevices.getUserMedia(_this.mediaStreamConstraints).then(_this.gotLocalMediaStream)[\"catch\"](_this.handleLocalMediaStreamError);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickStop\", function () {\n      _this.localStream.getVideoTracks()[0].stop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickCall\", function () {\n      _this.localPeerConnection.addStream(localStream);\n\n      trace(\"Added local stream to localPeerConnection.\");\n    });\n\n    _this.localVideo = createRef();\n    _this.remoteVideo = createRef();\n    _this.localStream = createRef();\n    _this.state = {\n      callButtonDisabled: true\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var peerConnection = event.target;\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        var newIceCandidate = new RTCIceCandidate(iceCandidate);\n        var otherPeer = getOtherPeer(peerConnection);\n        otherPeer.addIceCandidate(newIceCandidate).then(function () {\n          handleConnectionSuccess(peerConnection);\n        })[\"catch\"](function (error) {\n          handleConnectionFailure(peerConnection, error);\n        });\n        trace(\"\".concat(getPeerName(peerConnection), \" ICE candidate:\\n\") + \"\".concat(event.candidate.candidate, \".\"));\n      }\n    }\n  }, {\n    key: \"handleLocalMediaStreamError\",\n    value: function handleLocalMediaStreamError(error) {\n      console.log(\"navigator.getUserMedia error: \", error);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.localPeerConnection = new RTCPeerConnection(servers);\n      localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n      localPeerConnection.addEventListener(\"iceconnectionstatechange\", handleConnectionChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Realtime communication with WebRTC\"), __jsx(\"video\", {\n        id: \"local-video\",\n        autoPlay: true,\n        playsInline: true,\n        ref: this.localVideo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), __jsx(\"video\", {\n        id: \"remote-video\",\n        autoPlay: true,\n        playsInline: true,\n        ref: this.remoteVideo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        onClick: this.onClickButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"\\uB0B4 \\uCE74\\uBA54\\uB77C \\uD0A4\\uAE30\"), __jsx(\"button\", {\n        onClick: this.onClickStop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"\\uC885\\uB8CC\"), __jsx(\"button\", {\n        disabled: this.state.callButtonDisabled,\n        onClick: this.onClickCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"\\uBD88\\uB7EC\\uC624\\uAE30\")));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nexport default index;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js"],"names":["React","createRef","Component","adapter","index","props","video","audio","mediaStream","localStream","localVideo","current","srcObject","trace","setState","callButtonDisabled","navigator","mediaDevices","getUserMedia","mediaStreamConstraints","then","gotLocalMediaStream","handleLocalMediaStreamError","getVideoTracks","stop","localPeerConnection","addStream","remoteVideo","state","event","peerConnection","target","iceCandidate","candidate","newIceCandidate","RTCIceCandidate","otherPeer","getOtherPeer","addIceCandidate","handleConnectionSuccess","error","handleConnectionFailure","getPeerName","console","log","RTCPeerConnection","servers","addEventListener","handleConnection","handleConnectionChange","onClickButton","onClickStop","onClickCall"],"mappings":"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","sourcesContent":["import React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\nimport adapter from \"webrtc-adapter\";\nclass index extends Component {\n  constructor(props) {\n    super(props);\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.localStream = createRef();\n    this.state = {\n      callButtonDisabled: true\n    };\n  }\n\n  handleConnection(event) {\n    const peerConnection = event.target;\n    const iceCandidate = event.candidate;\n\n    if (iceCandidate) {\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\n      const otherPeer = getOtherPeer(peerConnection);\n\n      otherPeer\n        .addIceCandidate(newIceCandidate)\n        .then(() => {\n          handleConnectionSuccess(peerConnection);\n        })\n        .catch(error => {\n          handleConnectionFailure(peerConnection, error);\n        });\n\n      trace(\n        `${getPeerName(peerConnection)} ICE candidate:\\n` +\n          `${event.candidate.candidate}.`\n      );\n    }\n  }\n\n  mediaStreamConstraints = {\n    video: true,\n    audio: true\n  };\n\n  gotLocalMediaStream = mediaStream => {\n    this.localStream = mediaStream;\n    this.localVideo.current.srcObject = mediaStream;\n    trace(\"Received local stream.\");\n    this.setState({ callButtonDisabled: false });\n  };\n\n  handleLocalMediaStreamError(error) {\n    console.log(\"navigator.getUserMedia error: \", error);\n  }\n\n  onClickButton = () => {\n    navigator.mediaDevices\n      .getUserMedia(this.mediaStreamConstraints)\n      .then(this.gotLocalMediaStream)\n      .catch(this.handleLocalMediaStreamError);\n  };\n\n  onClickStop = () => {\n    this.localStream.getVideoTracks()[0].stop();\n  };\n\n  onClickCall = () => {\n    this.localPeerConnection.addStream(localStream);\n    trace(\"Added local stream to localPeerConnection.\");\n  };\n\n  componentDidMount() {\n    this.localPeerConnection = new RTCPeerConnection(servers);\n    localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n    localPeerConnection.addEventListener(\n      \"iceconnectionstatechange\",\n      handleConnectionChange\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Realtime communication with WebRTC</h1>\n        <video id=\"local-video\" autoPlay playsInline ref={this.localVideo} />\n        <video id=\"remote-video\" autoPlay playsInline ref={this.remoteVideo} />\n        <div className=\"button\">\n          <button onClick={this.onClickButton}>내 카메라 키기</button>\n          <button onClick={this.onClickStop}>종료</button>\n          <button\n            disabled={this.state.callButtonDisabled}\n            onClick={this.onClickCall}\n          >\n            불러오기\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}