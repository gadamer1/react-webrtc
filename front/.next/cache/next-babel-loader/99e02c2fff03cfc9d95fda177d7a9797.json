{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onOfferButton\", () => {\n      console.log(\"Offer\"); // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n      // initiates the creation of SDP\n\n      this.pc.createOffer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"_onAnswerButton\", () => {\n      console.log(\"Answer\");\n      this.pc.createAnswer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"sendToPeer\", (messageType, payload) => {\n      this.socket.emit(messageType, {\n        socketID: this.socket.id,\n        payload\n      });\n    });\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.textref = createRef();\n  }\n\n  componentDidMount() {\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\n    if (navigator.mediaDevices === undefined) {\n      navigator.mediaDevices = {};\n    } // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n\n\n    if (navigator.mediaDevices.getUserMedia === undefined) {\n      navigator.mediaDevices.getUserMedia = function (constraints) {\n        // First get ahold of the legacy getUserMedia, if present\n        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia; // Some browsers just don't implement it - return a rejected promise with an error\n        // to keep a consistent interface\n\n        if (!getUserMedia) {\n          return Promise.reject(new Error(\"getUserMedia is not implemented in this browser\"));\n        } // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n\n\n        return new Promise(function (resolve, reject) {\n          getUserMedia.call(navigator, constraints, resolve, reject);\n        });\n      };\n    }\n\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      this.textref.value = JSON.stringify(sdp);\n    });\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n\n    this.inboundStream = null;\n\n    this.pc.ontrack = e => {\n      console.log(\"ontrack\", e);\n\n      if (e.streams && e.streams[0]) {\n        this.remoteVideo.current.srcObject = e.streams[0];\n      } else {\n        if (!this.inboundStream) {\n          this.inboundStream = new MediaStream();\n          this.remoteVideo.current.srcObject = this.inboundStream;\n        }\n\n        this.inboundStream.addTrack(e.track);\n      }\n    };\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      console.log(mediaStream);\n      this.localVideo.current.srcObject = mediaStream;\n      mediaStream.getTracks().reduce(track => {\n        this.pc.addTrack(track, mediaStream);\n        console.log(track);\n      });\n    }).catch(err => console.error(err));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        backgroundColor: \"black\"\n      },\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        marginLeft: 10,\n        backgroundColor: \"black\"\n      },\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onOfferButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"offer button\"), __jsx(\"button\", {\n      onClick: this._onAnswerButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"answer button\"), __jsx(\"textarea\", {\n      style: {\n        width: 450,\n        height: 40\n      },\n      ref: ref => {\n        this.textref = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","PureComponent","io","Video","constructor","props","console","log","pc","createOffer","offerToReceiveVideo","then","sdp","setLocalDescription","sendToPeer","createAnswer","messageType","payload","socket","emit","socketID","id","state","localVideo","remoteVideo","textref","componentDidMount","navigator","mediaDevices","undefined","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","call","path","on","success","setRemoteDescription","RTCSessionDescription","value","JSON","stringify","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","onconnectionstatechange","inboundStream","ontrack","streams","current","srcObject","MediaStream","addTrack","track","video","audio","mediaStream","getTracks","reduce","catch","err","error","render","width","height","backgroundColor","marginLeft","_onOfferButton","_onAnswerButton","ref"],"mappings":"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","sourcesContent":["import React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.textref = createRef();\n  }\n\n  componentDidMount() {\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\n    if (navigator.mediaDevices === undefined) {\n      navigator.mediaDevices = {};\n    }\n\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    if (navigator.mediaDevices.getUserMedia === undefined) {\n      navigator.mediaDevices.getUserMedia = function(constraints) {\n        // First get ahold of the legacy getUserMedia, if present\n        var getUserMedia =\n          navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n        // Some browsers just don't implement it - return a rejected promise with an error\n        // to keep a consistent interface\n        if (!getUserMedia) {\n          return Promise.reject(\n            new Error(\"getUserMedia is not implemented in this browser\")\n          );\n        }\n\n        // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n        return new Promise(function(resolve, reject) {\n          getUserMedia.call(navigator, constraints, resolve, reject);\n        });\n      };\n    }\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      this.textref.value = JSON.stringify(sdp);\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n    this.inboundStream = null;\n    this.pc.ontrack = e => {\n      console.log(\"ontrack\", e);\n      if (e.streams && e.streams[0]) {\n        this.remoteVideo.current.srcObject = e.streams[0];\n      } else {\n        if (!this.inboundStream) {\n          this.inboundStream = new MediaStream();\n          this.remoteVideo.current.srcObject = this.inboundStream;\n        }\n        this.inboundStream.addTrack(e.track);\n      }\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        console.log(mediaStream);\n        this.localVideo.current.srcObject = mediaStream;\n        mediaStream.getTracks().reduce(track => {\n          this.pc.addTrack(track, mediaStream);\n          console.log(track);\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onOfferButton = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  _onAnswerButton = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{ width: 100, height: 100, backgroundColor: \"black\" }}\n          ref={this.localVideo}\n          autoPlay\n          playsInline\n        />\n        <video\n          style={{\n            width: 100,\n            height: 100,\n            marginLeft: 10,\n            backgroundColor: \"black\"\n          }}\n          ref={this.remoteVideo}\n          autoPlay\n          playsInline\n        />\n        <button onClick={this._onOfferButton}>offer button</button>\n        <button onClick={this._onAnswerButton}>answer button</button>\n        <textarea\n          style={{ width: 450, height: 40 }}\n          ref={ref => {\n            this.textref = ref;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}