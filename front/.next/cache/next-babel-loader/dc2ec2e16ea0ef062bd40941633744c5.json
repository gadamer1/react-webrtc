{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onCallButton\", () => {});\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", e.candidate);\n      }\n    };\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      this.localVideo.current.srcObject = mediaStream;\n      mediaStream.getTracks().reduce(() => {});\n    }).catch(err => console.error(err));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onCallButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"call button\"));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","io","Video","constructor","props","state","localVideo","remoteVideo","componentDidMount","socket","path","on","success","console","log","sdp","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","emit","navigator","mediaDevices","getUserMedia","video","audio","then","mediaStream","current","srcObject","getTracks","reduce","catch","err","error","render","_onCallButton"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,2CAgDH,MAAM,CAAE,CAhDL;;AAGjB,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkBN,SAAS,EAA3B;AACA,SAAKO,WAAL,GAAmBP,SAAS,EAA5B;AACD;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,MAAL,GAAcR,EAAE,CAAC,kCAAD,EAAqC;AACnDS,MAAAA,IAAI,EAAE;AAD6C,KAArC,CAAhB;AAIA,SAAKD,MAAL,CAAYE,EAAZ,CAAe,oBAAf,EAAqCC,OAAO,IAAI;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,KAFD;AAIA,SAAKH,MAAL,CAAYE,EAAZ,CAAe,eAAf,EAAgCI,GAAG,IAAI;AACrC,WAAKC,EAAL,CAAQC,oBAAR,CAA6B,IAAIC,qBAAJ,CAA0BH,GAA1B,CAA7B;AACD,KAFD;AAIA,SAAKN,MAAL,CAAYE,EAAZ,CAAe,WAAf,EAA4BQ,SAAS,IAAI;AACvC,WAAKH,EAAL,CAAQI,eAAR,CAAwB,IAAIC,eAAJ,CAAoBF,SAApB,CAAxB;AACD,KAFD;AAIA,UAAMG,SAAS,GAAG;AAChBC,MAAAA,IAAI,EAAE;AADU,KAAlB;AAIA,SAAKP,EAAL,GAAU,IAAIQ,iBAAJ,CAAsBF,SAAtB,CAAV;;AACA,SAAKN,EAAL,CAAQS,cAAR,GAAyBC,CAAC,IAAI;AAC5B,UAAIA,CAAC,CAACP,SAAN,EAAiB;AACf,aAAKV,MAAL,CAAYkB,IAAZ,CAAiB,WAAjB,EAA8BD,CAAC,CAACP,SAAhC;AACD;AACF,KAJD;;AAMAS,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AACZC,MAAAA,KAAK,EAAE,IADK;AAEZC,MAAAA,KAAK,EAAE;AAFK,KADhB,EAKGC,IALH,CAKQC,WAAW,IAAI;AACnB,WAAK5B,UAAL,CAAgB6B,OAAhB,CAAwBC,SAAxB,GAAoCF,WAApC;AACAA,MAAAA,WAAW,CAACG,SAAZ,GAAwBC,MAAxB,CAA+B,MAAM,CAAE,CAAvC;AACD,KARH,EASGC,KATH,CASSC,GAAG,IAAI3B,OAAO,CAAC4B,KAAR,CAAcD,GAAd,CAThB;AAUD;;AAIDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,GAAG,EAAE,KAAKpC,UAAjB;AAA6B,MAAA,QAAQ,MAArC;AAAsC,MAAA,WAAW,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAO,MAAA,GAAG,EAAE,KAAKC,WAAjB;AAA8B,MAAA,QAAQ,MAAtC;AAAuC,MAAA,WAAW,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,KAAKoC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,CADF;AAOD;;AA3D2B;;AA8D9B,eAAezC,KAAf","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", e.candidate);\n      }\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        mediaStream.getTracks().reduce(() => {});\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onCallButton = () => {};\n\n  render() {\n    return (\n      <div>\n        <video ref={this.localVideo} autoPlay playsInline />\n        <video ref={this.remoteVideo} autoPlay playsInline />\n        <button onClick={this._onCallButton}>call button</button>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}