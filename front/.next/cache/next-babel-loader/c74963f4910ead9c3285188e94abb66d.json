{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onOfferButton\", () => {\n      console.log(\"Offer\"); // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n      // initiates the creation of SDP\n\n      this.pc.createOffer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"_onAnswerButton\", () => {\n      console.log(\"Answer\");\n      this.pc.createAnswer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer(\"offerOrAnswer\", sdp);\n      });\n    });\n\n    _defineProperty(this, \"sendToPeer\", (messageType, payload) => {\n      this.socket.emit(messageType, {\n        socketID: this.socket.id,\n        payload\n      });\n    });\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.textref = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      this.textref.value = JSON.stringify(sdp);\n    });\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n\n    this.inboundStream = null;\n\n    this.pc.ontrack = e => {\n      console.log(\"ontrack\", e);\n\n      if (e.streams && e.streams[0]) {\n        this.remoteVideo.current.srcObject = e.streams[0];\n      } else {\n        if (!this.inboundStream) {\n          this.inboundStream = new MediaStream();\n          this.remoteVideo.current.srcObject = this.inboundStream;\n        }\n\n        this.inboundStream.addTrack(e.track);\n      }\n    };\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      this.localVideo.current.srcObject = mediaStream;\n      mediaStream.getTracks().reduce(track => {\n        this.pc.addTrack(track);\n        console.log(track);\n      });\n    }).catch(err => console.error(err));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        backgroundColor: \"black\"\n      },\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      style: {\n        width: 100,\n        height: 100,\n        marginLeft: 10,\n        backgroundColor: \"black\"\n      },\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onOfferButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"offer button\"), __jsx(\"button\", {\n      onClick: this._onAnswerButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"answer button\"), __jsx(\"textarea\", {\n      style: {\n        width: 450,\n        height: 40\n      },\n      ref: ref => {\n        this.textref = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","PureComponent","io","Video","constructor","props","console","log","pc","createOffer","offerToReceiveVideo","then","sdp","setLocalDescription","sendToPeer","createAnswer","messageType","payload","socket","emit","socketID","id","state","localVideo","remoteVideo","textref","componentDidMount","path","on","success","setRemoteDescription","RTCSessionDescription","value","JSON","stringify","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","onconnectionstatechange","inboundStream","ontrack","streams","current","srcObject","MediaStream","addTrack","track","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","getTracks","reduce","catch","err","error","render","width","height","backgroundColor","marginLeft","_onOfferButton","_onAnswerButton","ref"],"mappings":"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","sourcesContent":["import React, { Component, createRef, PureComponent } from \"react\";\nimport io from \"socket.io-client\";\n\nclass Video extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.textref = createRef();\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:8080/webrtcPeer\", {\n      path: \"/webrtc\"\n    });\n\n    this.socket.on(\"connection-success\", success => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", sdp => {\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      this.textref.value = JSON.stringify(sdp);\n    });\n\n    this.socket.on(\"candidate\", candidate => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      urls: \"stun:stun.l.google.com:19302\"\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n    this.pc.onicecandidate = e => {\n      if (e.candidate) {\n        this.socket.emit(\"candidate\", {\n          socketID: this.socket.id,\n          payload: e.candidate\n        });\n      }\n    };\n    this.pc.onconnectionstatechange = e => {\n      console.log(\"onconnectionstatechange\", e);\n    };\n    this.inboundStream = null;\n    this.pc.ontrack = e => {\n      console.log(\"ontrack\", e);\n      if (e.streams && e.streams[0]) {\n        this.remoteVideo.current.srcObject = e.streams[0];\n      } else {\n        if (!this.inboundStream) {\n          this.inboundStream = new MediaStream();\n          this.remoteVideo.current.srcObject = this.inboundStream;\n        }\n        this.inboundStream.addTrack(e.track);\n      }\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        mediaStream.getTracks().reduce(track => {\n          this.pc.addTrack(track);\n          console.log(track);\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  _onOfferButton = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  _onAnswerButton = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(sdp => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{ width: 100, height: 100, backgroundColor: \"black\" }}\n          ref={this.localVideo}\n          autoPlay\n          playsInline\n        />\n        <video\n          style={{\n            width: 100,\n            height: 100,\n            marginLeft: 10,\n            backgroundColor: \"black\"\n          }}\n          ref={this.remoteVideo}\n          autoPlay\n          playsInline\n        />\n        <button onClick={this._onOfferButton}>offer button</button>\n        <button onClick={this._onAnswerButton}>answer button</button>\n        <textarea\n          style={{ width: 450, height: 40 }}\n          ref={ref => {\n            this.textref = ref;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}