{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef } from \"react\";\nimport { getUserMediaContraints, CustomTrace, offerOptions } from \"../../config/RTCSettings\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_onStartClickButton\", () => {\n      navigator.mediaDevices.getUserMedia(getUserMediaContraints).then(this.handleGetLocalMediaStream).catch(this.handleErrorGetLocalMediaStream);\n    });\n\n    _defineProperty(this, \"handleGetLocalMediaStream\", mediaStream => {\n      this.localVideo.current.srcObject = mediaStream;\n      this.localStream = mediaStream;\n      CustomTrace(\"get local media stream!\");\n      this.setState({\n        startButtonDisable: true,\n        callButtonDisable: false,\n        stopButtonDisable: false\n      });\n    });\n\n    _defineProperty(this, \"_onClickStopButton\", () => {\n      this.setState({\n        startButtonDisable: false,\n        stopButtonDisable: true\n      });\n      this.localStream.getVideoTracks()[0].stop();\n      this.localStream.getAudioTracks()[0].stop();\n    });\n\n    _defineProperty(this, \"_onClickCallButton\", () => {\n      this.setState({\n        callButtonDisable: true\n      });\n      CustomTrace(\"Starting call\");\n      const videoTracks = this.localStream.getVideoTracks();\n      const audioTracks = this.localStream.getAudioTracks();\n\n      if (videoTracks.length > 0) {\n        CustomTrace(`Using video device: ${videoTracks[0].label}.`);\n      }\n\n      if (audioTracks.length > 0) {\n        CustomTrace(`Using audio device: ${audioTracks[0].label}.`);\n      }\n\n      const servers = null; // Allows for RTC server configuration.\n      // Create peer connections and add behavior.\n\n      this.localPeerConnection = new RTCPeerConnection(servers);\n      CustomTrace(\"Created local peer connection object localPeerConnection.\");\n      this.localPeerConnection.addEventListener(\"icecandidate\", this.handleConnection);\n      this.localPeerConnection.addEventListener(\"iceconnectionstatechange\", this.handleConnectionChange);\n      this.remotePeerConnection = new RTCPeerConnection(servers);\n      CustomTrace(\"Created remote peer connection object remotePeerConnection.\");\n      this.remotePeerConnection.addEventListener(\"icecandidate\", this.handleConnection);\n      this.remotePeerConnection.addEventListener(\"iceconnectionstatechange\", this.handleConnectionChange);\n      this.remotePeerConnection.addEventListener(\"addstream\", gotRemoteMediaStream); // Add local stream to connection and create offer to connect.\n\n      this.localPeerConnection.addStream(this.localStream);\n      trace(\"Added local stream to localPeerConnection.\");\n      trace(\"localPeerConnection createOffer start.\");\n      this.localPeerConnection.createOffer(offerOptions).then(this.createdOffer).catch(this.setSessionDescriptionError);\n    });\n\n    _defineProperty(this, \"handleErrorGetLocalMediaStream\", error => {\n      console.error(error);\n    });\n\n    this.localVideo = createRef();\n    this.localStream = createRef();\n    this.localPeerConnection = createRef();\n    this.remotePeerConnection = createRef();\n    this.state = {\n      callButtonDisable: true,\n      startButtonDisable: false,\n      stopButtonDisable: true\n    };\n  } // 시작\n\n\n  // Handles remote MediaStream success by adding it as the remoteVideo src.\n  gotRemoteMediaStream(event) {\n    const mediaStream = event.stream;\n    remoteVideo.srcObject = mediaStream;\n    remoteStream = mediaStream;\n    trace(\"Remote peer connection received remote stream.\");\n  }\n\n  handleConnection(event) {\n    const peerConnection = event.target;\n    const iceCandidate = event.candidate;\n\n    if (iceCandidate) {\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\n      const otherPeer = getOtherPeer(peerConnection);\n      otherPeer.addIceCandidate(newIceCandidate).then(() => {\n        handleConnectionSuccess(peerConnection);\n      }).catch(error => {\n        handleConnectionFailure(peerConnection, error);\n      });\n      CustomTrace(`${getPeerName(peerConnection)} ICE candidate:\\n` + `${event.candidate.candidate}.`);\n    }\n  } // Logs that the connection succeeded.\n\n\n  handleConnectionSuccess(peerConnection) {\n    trace(`${getPeerName(peerConnection)} addIceCandidate success.`);\n  } // Logs that the connection failed.\n\n\n  handleConnectionFailure(peerConnection, error) {\n    trace(`${getPeerName(peerConnection)} failed to add ICE Candidate:\\n` + `${error.toString()}.`);\n  } // Logs changes to the connection state.\n\n\n  handleConnectionChange(event) {\n    const peerConnection = event.target;\n    console.log(\"ICE state change event: \", event);\n    CustomTrace(`${getPeerName(peerConnection)} ICE state: ` + `${peerConnection.iceConnectionState}.`);\n  } // Logs offer creation and sets peer connection session descriptions.\n\n\n  createdOffer(description) {\n    CustomTrace(`Offer from localPeerConnection:\\n${description.sdp}`);\n    CustomTrace(\"localPeerConnection setLocalDescription start.\");\n    this.localPeerConnection.setLocalDescription(description).then(() => {\n      this.setLocalDescriptionSuccess(this.localPeerConnection);\n    }).catch(this.setSessionDescriptionError);\n    CustomTrace(\"remotePeerConnection setRemoteDescription start.\");\n    this.remotePeerConnection.setRemoteDescription(description).then(() => {\n      this.setRemoteDescriptionSuccess(this.emotePeerConnection);\n    }).catch(this.setSessionDescriptionError);\n    CustomTrace(\"remotePeerConnection createAnswer start.\");\n    this.remotePeerConnection.createAnswer().then(this.createdAnswer).catch(this.setSessionDescriptionError);\n  } // Logs success when localDescription is set.\n\n\n  setLocalDescriptionSuccess(peerConnection) {\n    setDescriptionSuccess(peerConnection, \"setLocalDescription\");\n  } // Logs success when remoteDescription is set.\n\n\n  setRemoteDescriptionSuccess(peerConnection) {\n    setDescriptionSuccess(peerConnection, \"setRemoteDescription\");\n  } // Logs error when setting session description fails.\n\n\n  setSessionDescriptionError(error) {\n    trace(`Failed to create session description: ${error.toString()}.`);\n  } // Logs success when setting session description.\n\n\n  setDescriptionSuccess(peerConnection, functionName) {\n    const peerName = getPeerName(peerConnection);\n    trace(`${peerName} ${functionName} complete.`);\n  } // Logs answer to offer creation and sets peer connection session descriptions.\n\n\n  createdAnswer(description) {\n    CustomTrace(`Answer from remotePeerConnection:\\n${description.sdp}.`);\n    CustomTrace(\"remotePeerConnection setLocalDescription start.\");\n    this.remotePeerConnection.setLocalDescription(description).then(() => {\n      this.setLocalDescriptionSuccess(this.remotePeerConnection);\n    }).catch(this.setSessionDescriptionError);\n    CustomTrace(\"localPeerConnection setRemoteDescription start.\");\n    this.localPeerConnection.setRemoteDescription(description).then(() => {\n      this.setRemoteDescriptionSuccess(this.localPeerConnection);\n    }).catch(this.setSessionDescriptionError);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"videos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      autoPlay: true,\n      playsInline: true,\n      ref: this.localVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      disabled: this.state.startButtonDisable,\n      onClick: this._onStartClickButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"\\uC2DC\\uC791 \\uBC84\\uD2BC\"), __jsx(\"button\", {\n      disabled: this.state.stopButtonDisable,\n      onClick: this._onClickStopButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"\\uC885\\uB8CC\"), __jsx(\"button\", {\n      disabled: this.state.callButtonDisable,\n      onClick: this._onClickCallButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"\\uCF5C \\uBC84\\uD2BC\")));\n  } // error handling\n\n\n}\n\nexport default Container;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","getUserMediaContraints","CustomTrace","offerOptions","Container","constructor","props","navigator","mediaDevices","getUserMedia","then","handleGetLocalMediaStream","catch","handleErrorGetLocalMediaStream","mediaStream","localVideo","current","srcObject","localStream","setState","startButtonDisable","callButtonDisable","stopButtonDisable","getVideoTracks","stop","getAudioTracks","videoTracks","audioTracks","length","label","servers","localPeerConnection","RTCPeerConnection","addEventListener","handleConnection","handleConnectionChange","remotePeerConnection","gotRemoteMediaStream","addStream","trace","createOffer","createdOffer","setSessionDescriptionError","error","console","state","event","stream","remoteVideo","remoteStream","peerConnection","target","iceCandidate","candidate","newIceCandidate","RTCIceCandidate","otherPeer","getOtherPeer","addIceCandidate","handleConnectionSuccess","handleConnectionFailure","getPeerName","toString","log","iceConnectionState","description","sdp","setLocalDescription","setLocalDescriptionSuccess","setRemoteDescription","setRemoteDescriptionSuccess","emotePeerConnection","createAnswer","createdAnswer","setDescriptionSuccess","functionName","peerName","render","_onStartClickButton","_onClickStopButton","_onClickCallButton"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport {\n  getUserMediaContraints,\n  CustomTrace,\n  offerOptions\n} from \"../../config/RTCSettings\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.localVideo = createRef();\n    this.localStream = createRef();\n    this.localPeerConnection = createRef();\n    this.remotePeerConnection = createRef();\n\n    this.state = {\n      callButtonDisable: true,\n      startButtonDisable: false,\n      stopButtonDisable: true\n    };\n  }\n  // 시작\n  _onStartClickButton = () => {\n    navigator.mediaDevices\n      .getUserMedia(getUserMediaContraints)\n      .then(this.handleGetLocalMediaStream)\n      .catch(this.handleErrorGetLocalMediaStream);\n  };\n\n  handleGetLocalMediaStream = mediaStream => {\n    this.localVideo.current.srcObject = mediaStream;\n    this.localStream = mediaStream;\n\n    CustomTrace(\"get local media stream!\");\n    this.setState({\n      startButtonDisable: true,\n      callButtonDisable: false,\n      stopButtonDisable: false\n    });\n  };\n\n  _onClickStopButton = () => {\n    this.setState({\n      startButtonDisable: false,\n      stopButtonDisable: true\n    });\n    this.localStream.getVideoTracks()[0].stop();\n    this.localStream.getAudioTracks()[0].stop();\n  };\n\n  // 콜 버튼 눌렀을 때\n  _onClickCallButton = () => {\n    this.setState({ callButtonDisable: true });\n\n    CustomTrace(\"Starting call\");\n    const videoTracks = this.localStream.getVideoTracks();\n    const audioTracks = this.localStream.getAudioTracks();\n\n    if (videoTracks.length > 0) {\n      CustomTrace(`Using video device: ${videoTracks[0].label}.`);\n    }\n    if (audioTracks.length > 0) {\n      CustomTrace(`Using audio device: ${audioTracks[0].label}.`);\n    }\n\n    const servers = null; // Allows for RTC server configuration.\n\n    // Create peer connections and add behavior.\n    this.localPeerConnection = new RTCPeerConnection(servers);\n    CustomTrace(\"Created local peer connection object localPeerConnection.\");\n\n    this.localPeerConnection.addEventListener(\n      \"icecandidate\",\n      this.handleConnection\n    );\n    this.localPeerConnection.addEventListener(\n      \"iceconnectionstatechange\",\n      this.handleConnectionChange\n    );\n\n    this.remotePeerConnection = new RTCPeerConnection(servers);\n    CustomTrace(\"Created remote peer connection object remotePeerConnection.\");\n\n    this.remotePeerConnection.addEventListener(\n      \"icecandidate\",\n      this.handleConnection\n    );\n    this.remotePeerConnection.addEventListener(\n      \"iceconnectionstatechange\",\n      this.handleConnectionChange\n    );\n    this.remotePeerConnection.addEventListener(\n      \"addstream\",\n      gotRemoteMediaStream\n    );\n\n    // Add local stream to connection and create offer to connect.\n    this.localPeerConnection.addStream(this.localStream);\n    trace(\"Added local stream to localPeerConnection.\");\n\n    trace(\"localPeerConnection createOffer start.\");\n    this.localPeerConnection\n      .createOffer(offerOptions)\n      .then(this.createdOffer)\n      .catch(this.setSessionDescriptionError);\n  };\n\n  // Handles remote MediaStream success by adding it as the remoteVideo src.\n  gotRemoteMediaStream(event) {\n    const mediaStream = event.stream;\n    remoteVideo.srcObject = mediaStream;\n    remoteStream = mediaStream;\n    trace(\"Remote peer connection received remote stream.\");\n  }\n\n  handleConnection(event) {\n    const peerConnection = event.target;\n    const iceCandidate = event.candidate;\n\n    if (iceCandidate) {\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\n      const otherPeer = getOtherPeer(peerConnection);\n\n      otherPeer\n        .addIceCandidate(newIceCandidate)\n        .then(() => {\n          handleConnectionSuccess(peerConnection);\n        })\n        .catch(error => {\n          handleConnectionFailure(peerConnection, error);\n        });\n\n      CustomTrace(\n        `${getPeerName(peerConnection)} ICE candidate:\\n` +\n          `${event.candidate.candidate}.`\n      );\n    }\n  }\n  // Logs that the connection succeeded.\n  handleConnectionSuccess(peerConnection) {\n    trace(`${getPeerName(peerConnection)} addIceCandidate success.`);\n  }\n\n  // Logs that the connection failed.\n  handleConnectionFailure(peerConnection, error) {\n    trace(\n      `${getPeerName(peerConnection)} failed to add ICE Candidate:\\n` +\n        `${error.toString()}.`\n    );\n  }\n\n  // Logs changes to the connection state.\n  handleConnectionChange(event) {\n    const peerConnection = event.target;\n    console.log(\"ICE state change event: \", event);\n    CustomTrace(\n      `${getPeerName(peerConnection)} ICE state: ` +\n        `${peerConnection.iceConnectionState}.`\n    );\n  }\n\n  // Logs offer creation and sets peer connection session descriptions.\n  createdOffer(description) {\n    CustomTrace(`Offer from localPeerConnection:\\n${description.sdp}`);\n\n    CustomTrace(\"localPeerConnection setLocalDescription start.\");\n    this.localPeerConnection\n      .setLocalDescription(description)\n      .then(() => {\n        this.setLocalDescriptionSuccess(this.localPeerConnection);\n      })\n      .catch(this.setSessionDescriptionError);\n\n    CustomTrace(\"remotePeerConnection setRemoteDescription start.\");\n    this.remotePeerConnection\n      .setRemoteDescription(description)\n      .then(() => {\n        this.setRemoteDescriptionSuccess(this.emotePeerConnection);\n      })\n      .catch(this.setSessionDescriptionError);\n\n    CustomTrace(\"remotePeerConnection createAnswer start.\");\n    this.remotePeerConnection\n      .createAnswer()\n      .then(this.createdAnswer)\n      .catch(this.setSessionDescriptionError);\n  }\n\n  // Logs success when localDescription is set.\n  setLocalDescriptionSuccess(peerConnection) {\n    setDescriptionSuccess(peerConnection, \"setLocalDescription\");\n  }\n\n  // Logs success when remoteDescription is set.\n  setRemoteDescriptionSuccess(peerConnection) {\n    setDescriptionSuccess(peerConnection, \"setRemoteDescription\");\n  }\n  // Logs error when setting session description fails.\n  setSessionDescriptionError(error) {\n    trace(`Failed to create session description: ${error.toString()}.`);\n  }\n\n  // Logs success when setting session description.\n  setDescriptionSuccess(peerConnection, functionName) {\n    const peerName = getPeerName(peerConnection);\n    trace(`${peerName} ${functionName} complete.`);\n  }\n  // Logs answer to offer creation and sets peer connection session descriptions.\n  createdAnswer(description) {\n    CustomTrace(`Answer from remotePeerConnection:\\n${description.sdp}.`);\n\n    CustomTrace(\"remotePeerConnection setLocalDescription start.\");\n    this.remotePeerConnection\n      .setLocalDescription(description)\n      .then(() => {\n        this.setLocalDescriptionSuccess(this.remotePeerConnection);\n      })\n      .catch(this.setSessionDescriptionError);\n\n    CustomTrace(\"localPeerConnection setRemoteDescription start.\");\n    this.localPeerConnection\n      .setRemoteDescription(description)\n      .then(() => {\n        this.setRemoteDescriptionSuccess(this.localPeerConnection);\n      })\n      .catch(this.setSessionDescriptionError);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"videos\">\n          <video autoPlay playsInline ref={this.localVideo} />\n          <video autoPlay playsInline />\n        </div>\n        <div className=\"buttons\">\n          <button\n            disabled={this.state.startButtonDisable}\n            onClick={this._onStartClickButton}\n          >\n            시작 버튼\n          </button>\n          <button\n            disabled={this.state.stopButtonDisable}\n            onClick={this._onClickStopButton}\n          >\n            종료\n          </button>\n          <button\n            disabled={this.state.callButtonDisable}\n            onClick={this._onClickCallButton}\n          >\n            콜 버튼\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // error handling\n  handleErrorGetLocalMediaStream = error => {\n    console.error(error);\n  };\n}\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}