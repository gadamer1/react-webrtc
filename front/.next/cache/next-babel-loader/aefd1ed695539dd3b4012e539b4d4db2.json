{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createRef } from \"react\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleConnection\", e => {\n      if (e.candidate) {\n        const newIceCandidate = new RTCIceCandidate(e.candidate);\n        const otherPeer = e.target === this.localPeerConnection ? this.remotePeerConnection : this.localPeerConnection;\n        otherPeer.addIceCandidate(newIceCandidate).then(() => {\n          console.log(e.target, \"add iceCandidate success\");\n        }).catch(error => {\n          console.error(e.target, error);\n        });\n      }\n    });\n\n    _defineProperty(this, \"_onStartVideo\", () => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        this.localPeerConnection.addStream(mediaStream);\n      }).catch(error => console.error(error));\n    });\n\n    _defineProperty(this, \"_onCallButton\", () => {});\n\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  componentDidMount() {\n    this.localPeerConnection = new RTCPeerConnection(null);\n    this.remotePeerConnection = new RTCPeerConnection(null); // local peerconnection\n\n    this.localPeerConnection.onicecandidate = this.localPeerConnection.oniceconnectionstatechange = e => {\n      console.log(e);\n    };\n\n    this.localPeerConnection.onaddstream = e => {\n      console.log(e);\n      this.remoteVideo.current.srcObject = e.stream;\n    }; // remote connection\n\n\n    this.remotePeerConnection.onicecandidate = e => {};\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      ref: this.localVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      ref: this.remoteVideo,\n      autoPlay: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: this._onStartVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"\\uC2DC\\uC791\"), __jsx(\"button\", {\n      onClick: this._onCallButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"\\uCF5C \\uBC84\\uD2BC\"));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/components/video/Video.js"],"names":["React","Component","createRef","Video","constructor","props","e","candidate","newIceCandidate","RTCIceCandidate","otherPeer","target","localPeerConnection","remotePeerConnection","addIceCandidate","then","console","log","catch","error","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","localVideo","current","srcObject","addStream","state","remoteVideo","componentDidMount","RTCPeerConnection","onicecandidate","oniceconnectionstatechange","onaddstream","stream","render","_onStartVideo","_onCallButton"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n  }\n\n  handleConnection = e => {\n    if (e.candidate) {\n      const newIceCandidate = new RTCIceCandidate(e.candidate);\n      const otherPeer =\n        e.target === this.localPeerConnection\n          ? this.remotePeerConnection\n          : this.localPeerConnection;\n\n      otherPeer\n        .addIceCandidate(newIceCandidate)\n        .then(() => {\n          console.log(e.target, \"add iceCandidate success\");\n        })\n        .catch(error => {\n          console.error(e.target, error);\n        });\n    }\n  };\n\n  _onStartVideo = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true\n      })\n      .then(mediaStream => {\n        this.localVideo.current.srcObject = mediaStream;\n        this.localPeerConnection.addStream(mediaStream);\n      })\n      .catch(error => console.error(error));\n  };\n\n  _onCallButton = () => {};\n\n  componentDidMount() {\n    this.localPeerConnection = new RTCPeerConnection(null);\n    this.remotePeerConnection = new RTCPeerConnection(null);\n\n    // local peerconnection\n    this.localPeerConnection.onicecandidate = this.localPeerConnection.oniceconnectionstatechange = e => {\n      console.log(e);\n    };\n    this.localPeerConnection.onaddstream = e => {\n      console.log(e);\n      this.remoteVideo.current.srcObject = e.stream;\n    };\n\n    // remote connection\n    this.remotePeerConnection.onicecandidate = e => {};\n  }\n\n  render() {\n    return (\n      <div>\n        <video ref={this.localVideo} autoPlay playsInline />\n        <video ref={this.remoteVideo} autoPlay playsInline />\n        <button onClick={this._onStartVideo}>시작</button>\n        <button onClick={this._onCallButton}>콜 버튼</button>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}