{"ast":null,"code":"var _jsxFileName = \"/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\nimport adapter from \"webrtc-adapter\";\n\nfunction trace(text) {\n  text = text.trim();\n  const now = (window.performance.now() / 1000).toFixed(3);\n  console.log(now, text);\n}\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"mediaStreamConstraints\", {\n      video: true,\n      audio: true\n    });\n\n    _defineProperty(this, \"gotLocalMediaStream\", mediaStream => {\n      this.localStream = mediaStream;\n      this.localVideo.current.srcObject = mediaStream;\n      trace(\"Received local stream.\");\n      this.setState({\n        callButtonDisabled: false\n      });\n    });\n\n    _defineProperty(this, \"onClickButton\", () => {\n      navigator.mediaDevices.getUserMedia(this.mediaStreamConstraints).then(this.gotLocalMediaStream).catch(this.handleLocalMediaStreamError);\n    });\n\n    _defineProperty(this, \"onClickStop\", () => {\n      this.localStream.getVideoTracks()[0].stop();\n    });\n\n    _defineProperty(this, \"onClickCall\", () => {\n      this.localPeerConnection.addStream(localStream);\n      trace(\"Added local stream to localPeerConnection.\");\n    });\n\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.localStream = createRef();\n    this.state = {\n      callButtonDisabled: true\n    };\n  }\n\n  handleConnection(event) {\n    const peerConnection = event.target;\n    const iceCandidate = event.candidate;\n\n    if (iceCandidate) {\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\n      const otherPeer = getOtherPeer(peerConnection);\n      otherPeer.addIceCandidate(newIceCandidate).then(() => {\n        handleConnectionSuccess(peerConnection);\n      }).catch(error => {\n        handleConnectionFailure(peerConnection, error);\n      });\n      trace(`${getPeerName(peerConnection)} ICE candidate:\\n` + `${event.candidate.candidate}.`);\n    }\n  }\n\n  handleLocalMediaStreamError(error) {\n    console.log(\"navigator.getUserMedia error: \", error);\n  }\n\n  componentDidMount() {\n    this.localPeerConnection = new RTCPeerConnection(servers);\n    localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n    localPeerConnection.addEventListener(\"iceconnectionstatechange\", handleConnectionChange);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Realtime communication with WebRTC\"), __jsx(\"video\", {\n      id: \"local-video\",\n      autoPlay: true,\n      playsInline: true,\n      ref: this.localVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), __jsx(\"video\", {\n      id: \"remote-video\",\n      autoPlay: true,\n      playsInline: true,\n      ref: this.remoteVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: this.onClickButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"\\uB0B4 \\uCE74\\uBA54\\uB77C \\uD0A4\\uAE30\"), __jsx(\"button\", {\n      onClick: this.onClickStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"\\uC885\\uB8CC\"), __jsx(\"button\", {\n      disabled: this.state.callButtonDisabled,\n      onClick: this.onClickCall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"\\uBD88\\uB7EC\\uC624\\uAE30\")));\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/react-webrtc/front/pages/index.js"],"names":["React","createRef","Component","adapter","trace","text","trim","now","window","performance","toFixed","console","log","index","constructor","props","video","audio","mediaStream","localStream","localVideo","current","srcObject","setState","callButtonDisabled","navigator","mediaDevices","getUserMedia","mediaStreamConstraints","then","gotLocalMediaStream","catch","handleLocalMediaStreamError","getVideoTracks","stop","localPeerConnection","addStream","remoteVideo","state","handleConnection","event","peerConnection","target","iceCandidate","candidate","newIceCandidate","RTCIceCandidate","otherPeer","getOtherPeer","addIceCandidate","handleConnectionSuccess","error","handleConnectionFailure","getPeerName","componentDidMount","RTCPeerConnection","servers","addEventListener","handleConnectionChange","render","onClickButton","onClickStop","onClickCall"],"mappings":"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","sourcesContent":["import React, { createRef, Component } from \"react\";\nimport \"./style.scss\";\nimport adapter from \"webrtc-adapter\";\n\nfunction trace(text) {\n  text = text.trim();\n  const now = (window.performance.now() / 1000).toFixed(3);\n\n  console.log(now, text);\n}\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.localStream = createRef();\n    this.state = {\n      callButtonDisabled: true\n    };\n  }\n\n  handleConnection(event) {\n    const peerConnection = event.target;\n    const iceCandidate = event.candidate;\n\n    if (iceCandidate) {\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\n      const otherPeer = getOtherPeer(peerConnection);\n\n      otherPeer\n        .addIceCandidate(newIceCandidate)\n        .then(() => {\n          handleConnectionSuccess(peerConnection);\n        })\n        .catch(error => {\n          handleConnectionFailure(peerConnection, error);\n        });\n\n      trace(\n        `${getPeerName(peerConnection)} ICE candidate:\\n` +\n          `${event.candidate.candidate}.`\n      );\n    }\n  }\n\n  mediaStreamConstraints = {\n    video: true,\n    audio: true\n  };\n\n  gotLocalMediaStream = mediaStream => {\n    this.localStream = mediaStream;\n    this.localVideo.current.srcObject = mediaStream;\n    trace(\"Received local stream.\");\n    this.setState({ callButtonDisabled: false });\n  };\n\n  handleLocalMediaStreamError(error) {\n    console.log(\"navigator.getUserMedia error: \", error);\n  }\n\n  onClickButton = () => {\n    navigator.mediaDevices\n      .getUserMedia(this.mediaStreamConstraints)\n      .then(this.gotLocalMediaStream)\n      .catch(this.handleLocalMediaStreamError);\n  };\n\n  onClickStop = () => {\n    this.localStream.getVideoTracks()[0].stop();\n  };\n\n  onClickCall = () => {\n    this.localPeerConnection.addStream(localStream);\n    trace(\"Added local stream to localPeerConnection.\");\n  };\n\n  componentDidMount() {\n    this.localPeerConnection = new RTCPeerConnection(servers);\n    localPeerConnection.addEventListener(\"icecandidate\", handleConnection);\n    localPeerConnection.addEventListener(\n      \"iceconnectionstatechange\",\n      handleConnectionChange\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Realtime communication with WebRTC</h1>\n        <video id=\"local-video\" autoPlay playsInline ref={this.localVideo} />\n        <video id=\"remote-video\" autoPlay playsInline ref={this.remoteVideo} />\n        <div className=\"button\">\n          <button onClick={this.onClickButton}>내 카메라 키기</button>\n          <button onClick={this.onClickStop}>종료</button>\n          <button\n            disabled={this.state.callButtonDisabled}\n            onClick={this.onClickCall}\n          >\n            불러오기\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}